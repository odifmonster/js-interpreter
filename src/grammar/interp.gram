atom_e ::= NUMBER ___ { tok => mkNumber(parseFloat(tok.value)) }
    \ TRUE_TOK ___ { _ => mkBoolean(true) }
    \ FALSE_TOK ___ { _ => mkBoolean(false) }
    \ IDENT ___ { tok => mkIdent(tok.value) }

paren_e ::= lparen assign_e rparen ___ { res => res[1] }
    \ atom_e ___ { res => res[0] }

lparen ::= LPAREN ___ { mkEmpty }

rparen ::= RPAREN ___ { mkEmpty }

postfix_e ::= paren_e [ postfix_op ] ___ { buildPostUnopTree }

postfix_op ::= PLUS2 ___ { _ => mkAugUnop("POSTINC") }
    \ MINUS2 ___ { _ => mkAugUnop("POSTDEC") }

prefix_e ::= prefix_op prefix_e ___ { buildPreUnopTree }
    \ postfix_e ___ { res => res[0] }

prefix_op ::= EXCLAM ___ { _ => mkUnop("LOGNOT") }
    \ TILDE ___ { _ => mkUnop("BITNOT") }
    \ PLUS1 ___ { _ => mkUnop("POS") }
    \ MINUS1 ___ { _ => mkUnop("NEG") }
    \ PLUS2 ___ { _ => mkAugUnop("PREINC") }
    \ MINUS2 ___ { _ => mkAugUnop("PREDEC") }

pow_e ::= prefix_e ( pow_op pow_e ) ___ { buildBinopTree }

pow_op ::= STAR2 ___ { _ => mkBinop("EXPN") }

prod_e ::= pow_e [ prod_op pow_e ] ___ { buildBinopTree }

prod_op ::= STAR1 ___ { _ => mkBinop("MULT") }
    \ SLASH ___ { _ => mkBinop("DIV") }
    \ MODULO ___ { _ => mkBinop("MOD") }

sum_e ::= prod_e [ sum_op prod_e ] ___ { buildBinopTree }

sum_op ::= PLUS1 ___ { _ => mkBinop("ADD") }
    \ MINUS1 ___ { _ => mkBinop("SUB") }

shift_e ::= sum_e [ shift_op sum_e ] ___ { buildBinopTree }

shift_op ::= LANGLE2 ___ { _ => mkBinop("LSHIFT") }
    \ RANGLE2 ___ { _ => mkBinop("RSHIFT") }

compare_e ::= shift_e [ compare_op shift_e ] ___ { buildBinopTree }

compare_op ::= LANGLE1 ___ { _ => mkBinop("LT") }
    \ LANGLE1_EQ ___ { _ => mkBinop("LTEQ") }
    \ RANGLE1 ___ { _ => mkBinop("GT") }
    \ RANGLE1_EQ ___ { _ => mkBinop("GTEQ") }

iseq_e ::= compare_e [ iseq_op compare_e ] ___ { buildBinopTree }

iseq_op ::= EQ2 ___ { _ => mkBinop("ISEQ") }
    \ EXCLAM_EQ ___ { _ => mkBinop("NOTEQ") }

bitand_e ::= iseq_e [ bitand_op iseq_e ] ___ { buildBinopTree }

bitand_op ::= AMPER1 ___ { _ => mkBinop("BITAND") }

bitxor_e ::= bitand_e [ bitxor_op bitand_e ] ___ { buildBinopTree }

bitxor_op ::= CARET ___ { _ => mkBinop("BITXOR") }

bitor_e ::= bitxor_e [ bitor_op bitxor_e ] ___ { buildBinopTree }

bitor_op ::= PIPE1 ___ { _ => mkBinop("BITOR") }

logand_e ::= bitor_e [ logand_op bitor_e ] ___ { buildBinopTree }

logand_op ::= AMPER2 ___ { _ => mkBinop("LOGAND") }

logor_e ::= logand_e [ logor_op logand_e ] ___ { buildBinopTree }

logor_op ::= PIPE2 ___ { _ => mkBinop("LOGOR") }

assign_e ::= logor_e ( assign_op assign_e ) ___ { buildBinopTree }

assign_op ::= EQ1 ___ { _ => mkAugBinop("ASSIGN") }
    \ STAR2_EQ ___ { _ => mkAugBinop("AUGEXPN") }
    \ STAR1_EQ ___ { _ => mkAugBinop("AUGMULT") }
    \ SLASH_EQ ___ { _ => mkAugBinop("AUGDIV") }
    \ MOD_EQ ___ { _ => mkAugBinop("AUGMOD") }
    \ PLUS_EQ ___ { _ => mkAugBinop("AUGADD") }
    \ MINUS_EQ ___ { _ => mkAugBinop("AUGSUB") }
    \ LANGLE2_EQ ___ { _ => mkAugBinop("AUGLSHIFT") }
    \ RANGLE2_EQ ___ { _ => mkAugBinop("AUGRSHIFT") }
    \ AMPER_EQ ___ { _ => mkAugBinop("AUGBAND") }
    \ CARET_EQ ___ { _ => mkAugBinop("AUGBXOR") }
    \ PIPE_EQ ___ { _ => mkAugBinop("AUGBOR") }

AUG_UNOPS ::= POSTINC POSTDEC PREINC PREDEC

AUG_BINOPS ::= ASSIGN AUGEXPN AUGMULT AUGDIV AUGMOD
    AUGADD AUGSUB AUGLSHIFT AUGRSHIFT AUGBAND
    AUGBXOR AUGBOR

UNOPS ::= LOGNOT BITNOT POS NEG

BINOPS ::= EXPN MULT DIV MOD ADD SUB
    LSHIFT RSHIFT LT LTEQ GT GTEQ ISEQ
    NOTEQ BITAND BITXOR BITOR LOGAND
    LOGOR
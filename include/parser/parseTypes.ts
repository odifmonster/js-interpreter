export type Expression = { kind: "number"; value: number; }
    | { kind: "boolean"; value: boolean; }
    | { kind: "ident"; name: string; }
    | { kind: "binop"; op: Binop; left: Expression; right: Expression; }
    | { kind: "unop"; op: Unop; child: Expression; }
    | { kind: "augbinop"; op: AugBinop; left: Expression; right: Expression; }
    | { kind: "augunop"; op: AugUnop; child: Expression; };

export type Statement = { kind: "empty" }
    | { kind: "exp"; exp: Expression; }
    | { kind: "let"; name: string; value: Expression; }
    | { kind: "const"; name: string; value: Expression; }
    | { kind: "block"; body: Statement[]; }
    | { kind: "if"; test: Expression; truePart: Statement; falsePart: Statement; }
    | { kind: "while"; test: Expression; body: Statement; };

// GENERATED BY src/generators/gengram.py

export type Unop = "BITNOT" | "NEG" | "LOGNOT" | "POS";

export type Binop = "BITXOR" | "DIV" | "MOD" | "BITAND" | "SUB"
    | "ADD" | "ISEQ" | "EXPN" | "BITOR" | "GTEQ"
    | "RSHIFT" | "LT" | "NOTEQ" | "LTEQ" | "GT"
    | "LSHIFT" | "LOGOR" | "MULT" | "LOGAND";

export type AugUnop = "POSTINC" | "PREINC" | "PREDEC" | "POSTDEC";

export type AugBinop = "AUGLSHIFT" | "AUGMULT" | "AUGEXPN" | "AUGADD" | "AUGRSHIFT"
    | "AUGDIV" | "ASSIGN" | "AUGBXOR" | "AUGSUB" | "AUGBOR"
    | "AUGMOD" | "AUGBAND";
/* eslint-disable @typescript-eslint/no-unsafe-return */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-argument */

import {
  mkNumber, mkIdent, mkEmpty, mkBinop,
  buildBinopTree
} from "./treeFuncs";

// GENERATED BY src/generators/gengram.py

export const GRAMMAR = {
  atom_e: [
    { token: "NUMBER", action: tok => mkNumber(parseFloat(tok.value)) },
    { token: "IDENT", action: tok => mkIdent(tok.value) },
  ],
  paren_e: [
    {
      rule: [
        "lparen",
        "sum_e",
        "rparen",
      ],
      action: res => res[1]
    },
    {
      rule: [
        "sum_e",
      ],
      action: res => res[0]
    },
  ],
  lparen: [
    { token: "LPAREN", action: mkEmpty },
  ],
  rparen: [
    { token: "RPAREN", action: mkEmpty },
  ],
  pow_e: [
    {
      rule: [
        "paren_e",
        {
          kind: "opt",
          symbols: ["pow_op", "pow_e"]
        },
      ],
      action: buildBinopTree
    },
  ],
  pow_op: [
    { token: "STAR2", action: _ => mkBinop("EXPN") },
  ],
  prod_e: [
    {
      rule: [
        "pow_e",
        {
          kind: "star",
          symbols: ["prod_op", "pow_e"]
        },
      ],
      action: buildBinopTree
    },
  ],
  prod_op: [
    { token: "STAR1", action: _ => mkBinop("MULT") },
    { token: "SLASH", action: _ => mkBinop("DIV") },
    { token: "MODULO", action: _ => mkBinop("MOD") },
  ],
  sum_e: [
    {
      rule: [
        "prod_e",
        {
          kind: "star",
          symbols: ["sum_op", "prod_e"]
        },
      ],
      action: buildBinopTree
    },
  ],
  sum_op: [
    { token: "PLUS", action: _ => mkBinop("ADD") },
    { token: "MINUS", action: _ => mkBinop("SUB") },
  ],
};
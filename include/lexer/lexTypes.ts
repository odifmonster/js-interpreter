export const OTHER = Symbol("[[OTHER]]");

export type TransVal = {
  consume: boolean;
  nextState?: LexerState;
  retVal?: TokenKind;
};

export type TransFunc = {
  [key in LexerState]: {
    [key: string]: TransVal;
    [OTHER]: TransVal;
  };
};

export type ReservedMap = Record<string, TokenKind>;

export type Token = { kind: TokenKind; value: string; };

// GENERATED BY src/generators/genlexer.py

export type LexerState = "plus" | "num1" | "end_float" | "amper" | "eq"
    | "num0" | "star2" | "langle" | "tok" | "mod"
    | "slash" | "rangle2" | "langle2" | "ident" | "exclam"
    | "rangle" | "minus" | "star" | "caret" | "pipe"
    | "float";

export type TokenKind = "STAR2_EQ" | "PLUS2" | "AMPER1" | "START" | "EXCLAM_EQ"
    | "AMPER_EQ" | "STAR2" | "MINUS_EQ" | "PIPE_EQ" | "CARET"
    | "RANGLE1" | "RANGLE2" | "SLASH_EQ" | "LANGLE1_EQ" | "LANGLE2_EQ"
    | "EQ2" | "RPAREN" | "NUMBER" | "MINUS1" | "STAR1_EQ"
    | "FALSE_TOK" | "SLASH" | "MINUS2" | "LANGLE1" | "LANGLE2"
    | "EQ1" | "STAR1" | "PIPE2" | "PIPE1" | "PLUS_EQ"
    | "CARET_EQ" | "AMPER2" | "TRUE_TOK" | "LPAREN" | "MODULO"
    | "TILDE" | "ERROR" | "EXCLAM" | "PLUS1" | "RANGLE1_EQ"
    | "IDENT" | "MOD_EQ" | "RANGLE2_EQ";
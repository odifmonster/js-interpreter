export const OTHER = Symbol("[[OTHER]]");

export type TransVal = {
  consume: boolean;
  nextState?: LexerState;
  retVal?: TokenKind;
};

export type TransFunc = {
  [key in LexerState]: {
    [key: string]: TransVal;
    [OTHER]: TransVal;
  };
};

export type ReservedMap = Record<string, TokenKind>;

export type Token = { kind: TokenKind; value: string; };

// GENERATED BY src/generators/genlexer.py

export type LexerState = "plus" | "langle" | "minus" | "rangle2" | "mod"
    | "langle2" | "ident" | "caret" | "end_multicmt" | "slash"
    | "eq" | "exclam" | "float" | "end_float" | "star2"
    | "rangle" | "num0" | "comment" | "multicmt" | "tok"
    | "star" | "amper" | "pipe" | "num1";

export type TokenKind = "EXCLAM_EQ" | "LANGLE2" | "LBRACE" | "CARET_EQ" | "LANGLE1"
    | "EXCLAM" | "WHILE_KW" | "RANGLE1_EQ" | "TILDE" | "AMPER2"
    | "NUMBER" | "MODULO" | "PLUS_EQ" | "PLUS2" | "STAR2_EQ"
    | "AMPER1" | "IDENT" | "PIPE1" | "CONST_KW" | "MINUS2"
    | "RANGLE2_EQ" | "ELSE_KW" | "SEMICOLON" | "PIPE_EQ" | "ERROR"
    | "STAR2" | "PLUS1" | "PIPE2" | "START" | "RANGLE1"
    | "SLASH" | "FALSE_TOK" | "MINUS1" | "TRUE_TOK" | "EQ2"
    | "COMMENT" | "STAR1_EQ" | "MOD_EQ" | "MINUS_EQ" | "STAR1"
    | "RANGLE2" | "RPAREN" | "EQ1" | "AMPER_EQ" | "LET_KW"
    | "CARET" | "IF_KW" | "SLASH_EQ" | "LANGLE2_EQ" | "LPAREN"
    | "LANGLE1_EQ" | "RBRACE";
export const OTHER = Symbol("[[OTHER]]");

export type TransVal = {
  consume: boolean;
  nextState?: LexerState;
  retVal?: TokenKind;
};

export type TransFunc = {
  [key in LexerState]: {
    [key: string]: TransVal;
    [OTHER]: TransVal;
  };
};

export type ReservedMap = Record<string, TokenKind>;

export type Token = { kind: TokenKind; value: string; };

// GENERATED BY src/generators/genlexer.py

export type LexerState = "rangle2" | "eq" | "ident" | "multicmt" | "exclam"
    | "float" | "tok" | "comment" | "amper" | "langle"
    | "pipe" | "slash" | "caret" | "end_float" | "num1"
    | "star" | "rangle" | "star2" | "langle2" | "plus"
    | "minus" | "num0" | "end_multicmt" | "mod";

export type TokenKind = "PIPE_EQ" | "MINUS_EQ" | "FALSE_TOK" | "RANGLE2" | "LANGLE1"
    | "ELSE_KW" | "EQ2" | "WHILE_KW" | "SLASH" | "ERROR"
    | "CARET" | "CARET_EQ" | "STAR1" | "AMPER2" | "IDENT"
    | "MINUS1" | "PLUS1" | "TRUE_TOK" | "STAR2" | "PIPE1"
    | "SEMICOLON" | "EXCLAM" | "AMPER_EQ" | "AMPER1" | "MINUS2"
    | "SLASH_EQ" | "RANGLE2_EQ" | "STAR2_EQ" | "STAR1_EQ" | "RANGLE1_EQ"
    | "IF_KW" | "RANGLE1" | "NUMBER" | "LANGLE2" | "PLUS2"
    | "LPAREN" | "EQ1" | "CONST_KW" | "PIPE2" | "PLUS_EQ"
    | "LANGLE2_EQ" | "START" | "EXCLAM_EQ" | "LET_KW" | "TILDE"
    | "MOD_EQ" | "MODULO" | "LANGLE1_EQ" | "COMMENT" | "RPAREN";